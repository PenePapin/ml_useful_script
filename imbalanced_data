import kagglehub
import pandas as pd
from sklearn.utils import resample, shuffle

# Download latest version
path = kagglehub.dataset_download("urstrulyvikas/lending-club-loan-data-analysis")

df = pd.read_csv(path + '/loan_data.csv')

df = df.rename(
    columns = {
        'credit.policy': 'credit_policy',
        'not.fully.paid': 'not_fully_paid',
        'int.rate': 'int_rate',
        'log.annual.inc': 'log_annual_inc',
        'days.with.cr.line': 'days_with_cr_line',
        'revol.bal': 'revol_bal',
        'revol.util': 'revol_util',
        'inq.last.6mths': 'inq_last_6mths',
        'delinq.2yrs': 'delinq_2yrs',
        'pub.rec': 'pub_rec'
    }
)

# Rebalance the data
not_fully_paid_0 = df[df['not_fully_paid'] == 0]
not_fully_paid_1 = df[df['not_fully_paid'] == 1]
#handling imbalanced data

df_minority_upsampled = resample(not_fully_paid_1, replace = True, n_samples = 8045)
df = pd.concat([not_fully_paid_0, df_minority_upsampled])
df = shuffle(df)

# Model Selection
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.dummy import DummyClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from xgboost import XGBClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, classification_report
from sklearn.base import BaseEstimator


X = df.drop('not_fully_paid', axis=1)
y = df['not_fully_paid']

cols_categorical = ['credit_policy', 'purpose']
cols_numeric = [col for col in X.columns if col not in cols_categorical]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

numeric_transformer = StandardScaler()
categorical_transformer = OneHotEncoder()

preprocessor = ColumnTransformer(
    transformers = [
        ('num', numeric_transformer, cols_numeric),
        ('cat', categorical_transformer, cols_categorical)
    ]
)

y_pred_base = (X_test['credit_policy'] == 0).astype(int)
accuracy = accuracy_score( y_test, y_pred_base )
precision = precision_score( y_test, y_pred_base )
recall = recall_score( y_test, y_pred_base )
f1 = f1_score( y_test, y_pred_base )
print(f'Benchmark Accuracy: {accuracy}, Precision: {precision}, Recall: {recall}, F1 Score: {f1}.')


models = {
    'Logit': LogisticRegression(),
    'DecisionTree': DecisionTreeClassifier(random_state=42),
    'RandomForest': RandomForestClassifier(n_estimators=100, random_state=42),
    'XGBoost': XGBClassifier(objective='binary:logistic', n_estimators=100, seed=42)
}

for name, model in models.items():
    pipeline = Pipeline( steps=[
        ('preprocessor',  preprocessor),
        ('classifier', model)
    ])
    pipeline.fit( X_train, y_train )
    y_pred = pipeline.predict( X_test )
    y_proba = pipeline.predict_proba( X_test )[:, 1]

    # accuracy = accuracy_score( y_test, y_pred )
    # precision = precision_score( y_test, y_pred )
    # recall = recall_score( y_test, y_pred )
    # f1 = f1_score( y_test, y_pred )
    # roc = roc_auc_score( y_test, y_proba )
    # print(f'{name} Accuracy: {accuracy:.4f}, Precision: {precision:.4f}, Recall: {recall:.4f}, F1 Score: {f1:.4f}, Roc Auc Score: {roc:.4f}')
    print(name, classification_report(y_test, y_pred))

# Cross Validation for selected models
from sklearn.model_selection import cross_val_predict, KFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from xgboost import XGBClassifier
from sklearn.pipeline import Pipeline

X = df.drop('not_fully_paid', axis=1)
y = df['not_fully_paid']

numeric_transformer = StandardScaler()
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

preprocessor = ColumnTransformer(
    [
        ('num', numeric_transformer, cols_numeric),
        ('cat', categorical_transformer, cols_categorical)
    ]
)

models = {
    'XGBoost': XGBClassifier(n_estimators=100, seed=42),
    'RandomForest': RandomForestClassifier(n_estimators=100, random_state=42)
}

kf = KFold(n_splits=10, shuffle=True, random_state=42)

for name, model in models.items():
    pipeline = Pipeline(
        [
            ('preprocessing', preprocessor),
            ('model', model)
        ]
    )
    print('==========')
    print(name)
    for train_index, test_index in kf.split(X, y):
        X_train, X_test, y_train, y_test = X.iloc[train_index], X.iloc[test_index], y.iloc[train_index], y.iloc[test_index]
        pipeline.fit(X_train, y_train)
        y_pred = pipeline.predict(X_test)
        print(classification_report(y_test, y_pred))


